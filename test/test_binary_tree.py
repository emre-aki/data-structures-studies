import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from BinaryTree.binary_tree import BinaryTree

bt = BinaryTree()
bt.append('A')
bt.append('B')
bt.append('C')
bt.append('D')
bt.append('E')
bt.append('1')
bt.append('2')
bt.append('3')
bt.append('4')
bt.append('5')
print('\n=== PRE_ORDER ===')
print(bt.traverse())
print('\n=== IN_ORDER ===')
print(bt.traverse(ttype='inorder'))
print('\n=== POST_ORDER ===')
print(bt.traverse(ttype='postorder'))
print('\n=== BREADTH_FIRST ===')
print(bt.breadth_first())
print('\nDepth: %d' % (bt.depth()))
print('# of nodes: %d' % (len(bt)))
print('Depth of deepest \'C\': %d' % (bt.depth_of_deepest('C')))
bt.append('C')
print('\n=== PRE_ORDER ===')
print(bt.traverse())
print('\n=== IN_ORDER ===')
print(bt.traverse(ttype='inorder'))
print('\n=== POST_ORDER ===')
print(bt.traverse(ttype='postorder'))
print('\n=== BREADTH_FIRST ===')
print(bt.breadth_first())
print('\nDepth: %d' % (bt.depth()))
print('Depth of deepest \'C\': %d' % (bt.depth_of_deepest('C')))
print('Alternative Depth of deepest \'C\': %d' % (bt.alt_depth_of_deepest('C')))
print('Minimum Depth: %d'%(bt.min_depth()))
print('Found 2: %s'%str(bt.find('2')))
print(bt.get_depths())